# Создайте собственный класс-исключение, который должен проверять содержимое
# списка на наличие только чисел. Проверить работу исключения на реальном
# примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду
# “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#
# Подсказка: для данного задания примем, что пользователь может вводить только
# числа и строки. При вводе пользователем очередного элемента необходимо
# реализовать проверку типа элемента и вносить его в список, только если
# введено число. Класс-исключение должен не позволить пользователю ввести текст
# (не число) и отобразить соответствующее сообщение. При этом работа скрипта
# не должна завершаться.

# комментарии писать нет смысла, думаю, что тут все понятно
class MyError(ValueError):
    def __init__(self):
        self.my_list = []

    def my_string(self):

        my_str = ''
        while not my_str == 'q':
            my_str = input("Введите значение списка (q для выхода): ")
            try:
                if my_str.isdigit():
                    number = int(my_str)
                    self.my_list.append(number)
                else:
                    raise MyError()
            except MyError:
                print(f'Значение не подходит!')
                so_so = input(f'Хотите попробовать еще раз? Да/Нет ')

                if so_so.lower() == 'да':
                    print(try_except.my_string())
                else:
                    my_str = 'q'

        return f'Полученный список: {self.my_list}'

try_except = MyError()
print(try_except.my_string())


# 2 вариант, но тут не срабатывает строка, но она как бы и не должна тут срабатывать
# so_so = input(f'Хотите попробовать еще раз? Да/Нет ')
# class MyError(ValueError):
#     def __init__(self):
#         self.my_list = []
#
#     def my_string(self):
#
#         my_str = ''
#         while not my_str == 'q':
#             my_str = input("Введите значение списка (q для выхода): ")
#             if my_str == 'q':
#                 break
#             else:
#                 try:
#                     if my_str.isdigit():
#                         number = int(my_str)
#                         self.my_list.append(number)
#                     else:
#                         raise MyError()
#                 except MyError:
#                     print(f'Значение не подходит!')
#                     so_so = input(f'Хотите попробовать еще раз? Да/Нет ')
#
#                     if so_so.lower() == 'да':
#                         print(try_except.my_string())
#                     else:
#                         my_str = 'q'
#
#         return f'Полученный список: {self.my_list}'
#
# try_except = MyError()
# print(try_except.my_string())